plugins {
    id("com.github.triplet.play") version "2.2.0"
}

apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-sentry/sentry.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 26
    buildToolsVersion "27.0.3"

    defaultConfig {
        applicationId "com.equesteo"
        minSdkVersion 21
        targetSdkVersion 26
        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative55"
        versionCode 152
        versionName "1.6.15"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }
    signingConfigs {
        release {
            storeFile file(MY_AWESOME_PROJECT_RELEASE_STORE_FILE)
            storePassword MY_AWESOME_PROJECT_RELEASE_STORE_PASSWORD
            keyAlias MY_AWESOME_PROJECT_RELEASE_KEY_ALIAS
            keyPassword MY_AWESOME_PROJECT_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-background-timer')
    compile project(':react-native-tts')
    compile project(':react-native-background-fetch')
    implementation project(':react-native-background-fetch')
    implementation project(':react-native-device-info')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-webview')
    implementation project(':react-native-camera')
    implementation project(':react-native-push-notification')
    implementation project(':react-native-firebase')
    implementation "com.google.firebase:firebase-messaging:17.3.0"
    implementation project(':react-native-android-location-services-dialog-box')
    implementation 'com.android.support:design:27.1.0'
    implementation project(':react-native-svg')
    implementation project(':react-native-sentry')
    implementation project(':@mauron85_react-native-background-geolocation')
    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-image-crop-picker')
    implementation project(':react-native-vector-icons')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:23.0.1"
    implementation "com.facebook.react:react-native:+"
    implementation project(':react-native-navigation')
    implementation 'com.google.android.gms:play-services-base:+'
    implementation 'com.google.android.gms:play-services-maps:+'
    implementation 'com.google.android.gms:play-services-location:+'
    implementation 'com.google.firebase:firebase-core:16.0.1'
    implementation project(':mapbox-react-native-mapbox-gl')
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'

// Getting error:  The library com.google.firebase:firebase-iid is being requested by various other libraries at [[17.0.0,17.0.0]], but resolves to 16.2.0. Disable the plugin and check your dependencies tree using ./gradlew :app:dependencies.
// solution from: https://github.com/OneSignal/OneSignal-Gradle-Plugin/issues/37
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

play {
    track = 'internal'
    serviceAccountCredentials = file('/Users/brln/equesteo/equesteo-app/android/api-7588742695205580826-52827-9e50835d28d3.json')
}
